"""
üìò LSP - Liskov Substitution Principle (Principio de Sustituci√≥n de Liskov)

Este principio establece que las subclases deben poder sustituir a sus clases padre
**sin alterar el comportamiento esperado del programa**.

En otras palabras:
Si una clase B hereda de una clase A, entonces **podemos usar B en cualquier lugar donde se use A, sin romper nada**.

‚úÖ Ventajas:
- Favorece la herencia bien aplicada.
- Evita errores de comportamiento cuando las jerarqu√≠as crecen.
- Permite escribir c√≥digo m√°s robusto y polim√≥rfico.

üß† Ejemplo conceptual:
Supongamos que queremos modelar aves. Algunas aves pueden volar, pero otras no.  
Si hacemos que todas las aves hereden de una clase "Ave" con el m√©todo "volar()", 
corremos el riesgo de que una subclase represente un ave que **no puede volar**, 
como un ping√ºino, lo que **rompe la l√≥gica esperada**.
"""

"""‚ùåMal ejemplo‚ùå (Viola LSP)"""
class Ave:
    def volar(self):
        print("Estoy volando")

"""
En este dise√±o, todas las aves heredan un m√©todo 'volar()',
asumiendo que todas pueden volar. Sin embargo, si creamos una subclase como 'Pinguino',
estaremos violando el Principio de Sustituci√≥n de Liskov (LSP), porque un ping√ºino no puede volar.

Esto significa que, al sustituir una instancia de 'Ave' por una de 'Pinguino',
el comportamiento del programa se vuelve incorrecto o inconsistente.
"""
class Pinguino(Ave):
    pass

"""‚úÖBuen ejemplo‚úÖ (Aplica LSP)"""
class Ave:
    pass


class AveVoladora(Ave):
    def volar(self):
        print("Estoy volando")


class AveNoVoladora(Ave):
    pass


class Pinguino(AveNoVoladora):
    pass

"""
Ahora Pinguino hereda de AveNoVoladora, y ya no tiene un m√©todo que no le corresponde.
Esto permite sustituir correctamente subclases sin romper la l√≥gica del programa, 
cumpliendo con el principio de sustituci√≥n de Liskov.

‚úÖ ¬øQu√© logramos aplicando LSP?
- Evitamos que una subclase (Pinguino) herede comportamientos que no le corresponden.
- Separamos correctamente a las aves seg√∫n su capacidad de volar, creando jerarqu√≠as coherentes.
- Podemos sustituir cualquier subclase por su clase padre sin romper el comportamiento del programa.
- Mejoramos la legibilidad, mantenibilidad y coherencia del dise√±o orientado a objetos.
- Respetamos el principio LSP al evitar que se invoquen m√©todos inadecuados en ciertas subclases.
"""