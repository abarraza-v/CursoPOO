"""
üìò DIP - Dependency Inversion Principle (Principio de Inversi√≥n de Dependencias)

Este principio es uno de los pilares del dise√±o orientado a objetos y dice lo siguiente:

üß© Las clases que contienen la l√≥gica principal (alto nivel) no deber√≠an depender directamente de clases que hacen tareas t√©cnicas espec√≠ficas (bajo nivel).  
Ambas deben depender de una abstracci√≥n.

üéØ ¬øQu√© es ‚Äúalto nivel‚Äù y ‚Äúbajo nivel‚Äù?

- M√≥dulo de alto nivel: es el que representa la l√≥gica del negocio, como Notificador, RegistrarUsuario, ProcesarPago, etc.  
  Estas clases describen "qu√© hace el sistema".

- M√≥dulo de bajo nivel: son los detalles t√©cnicos que ejecutan acciones espec√≠ficas, como enviar un email, guardar en base de datos, o conectarse a una API.  
  Ejemplos: EmailService, SMSService, FileLogger, etc.

üìå ¬øQu√© significa que ‚Äúambos deben depender de una abstracci√≥n‚Äù?

Significa que tanto las clases de alto nivel como las de bajo nivel deben trabajar a trav√©s de una interfaz com√∫n (una abstracci√≥n), y no depender directamente entre s√≠.

As√≠ se logra que el c√≥digo sea flexible, extensible y f√°cil de mantener.

---
üß† ¬øQu√© es una interfaz en este contexto?

Una interfaz es una especie de contrato que define un conjunto de m√©todos que una clase debe implementar.

En lenguajes como Java o C# existen como estructuras propias (interface), pero en Python no.  
Sin embargo, podemos lograr el mismo comportamiento usando:

‚úÖ Clases abstractas (heredando de abc.ABC).  
‚úÖ M√©todos obligatorios definidos con @abstractmethod.

Esto permite definir una "estructura base" que otras clases deben seguir, sin imponer c√≥mo debe funcionar cada m√©todo.

---
‚ùå Mal ejemplo (viola DIP)

La clase Notificador depende directamente de una clase t√©cnica concreta (EmailService). Si queremos cambiar el canal de notificaci√≥n, hay que reescribir esta clase:
"""

class EmailService:
    def enviar_email(self, mensaje):
        print(f"Enviando email: {mensaje}")

class Notificador:
    def __init__(self):
        self.servicio = EmailService()  # ‚Üê Acoplamiento fuerte

    def notificar(self, mensaje):
        self.servicio.enviar_email(mensaje)

"""
üî¥ Problemas:
- Notificador depende de un detalle t√©cnico (EmailService).
- No podemos cambiar el canal de notificaci√≥n sin modificar Notificador.
- No se puede reutilizar con otras implementaciones como SMSService o WhatsAppService.
- Rompe el principio DIP, porque el m√≥dulo de alto nivel est√° dependiendo del bajo nivel.

---
‚úÖ Buen ejemplo (aplica DIP correctamente)

Creamos una clase abstracta llamada ServicioNotificacion y hacemos que Notificador trabaje con ella, sin importar qu√© implementaci√≥n se use:
"""

from abc import ABC, abstractmethod

class ServicioNotificacion(ABC):
    @abstractmethod
    def enviar(self, mensaje: str):
        pass

class EmailService(ServicioNotificacion):
    def enviar(self, mensaje: str):
        print(f"Enviando email: {mensaje}")

class Notificador:
    def __init__(self, servicio: ServicioNotificacion):
        self.servicio = servicio  # ‚Üê Ahora depende de una abstracci√≥n

    def notificar(self, mensaje):
        self.servicio.enviar(mensaje)

"""
üß† ¬øQu√© logramos?

- Ahora Notificador no sabe ni le importa c√≥mo se env√≠a el mensaje.
- Solo necesita un objeto que cumpla con la interfaz ServicioNotificacion.
- Podemos cambiar EmailService por cualquier otra clase que implemente esa interfaz (como SMSService, WhatsAppService, etc.) sin tocar la l√≥gica de Notificador.
- Esto es cumplir DIP: la l√≥gica de negocio y los detalles t√©cnicos est√°n desacoplados.

---
üì¶ ¬øY c√≥mo esto tambi√©n ayuda a mantener el c√≥digo extensible?

Imaginemos que tenemos una funci√≥n registrar_usuario():

‚ùå Si Notificador depende internamente de EmailService, entonces registrar_usuario tambi√©n queda amarrada a ese servicio:

""" 
def registrar_usuario():
    notificador = Notificador()  # usa EmailService internamente
    notificador.notificar("Bienvenido") 
"""

‚úÖ Pero si seguimos DIP, registrar_usuario puede recibir cualquier servicio por fuera:

def registrar_usuario(servicio: ServicioNotificacion):
    notificador = Notificador(servicio)
    notificador.notificar("Bienvenido")

""" 
# En otra parte del c√≥digo (MockService y SMSServices entre comillas para evitar alerta de error. Esto solo con fines demostrativos.):
registrar_usuario(EmailService())
registrar_usuario("MockService"())  # para pruebas unitarias
registrar_usuario("SMSService"())   # para un nuevo canal 

"""

As√≠ logramos que registrar_usuario no cambie nunca, aunque cambie la tecnolog√≠a detr√°s.

---
üéì En resumen:

- DIP busca que el c√≥digo de negocio no dependa de detalles t√©cnicos.
- Ambos extremos (clases de l√≥gica y clases t√©cnicas) deben conectarse a trav√©s de una abstracci√≥n.
- En Python, esa abstracci√≥n se construye con clases abstractas y m√©todos obligatorios.
- Aplicar DIP mejora el desacoplamiento, permite reusar componentes, facilita las pruebas, y deja el sistema preparado para el cambio.

‚úÖ Resultado: c√≥digo limpio, mantenible y listo para escalar.
"""