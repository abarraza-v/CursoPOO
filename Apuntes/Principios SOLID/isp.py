"""
üìò ISP - Interface Segregation Principle (Principio de Segregaci√≥n de la Interfaz)

Este principio establece que los clientes **no deben verse obligados a depender de interfaces
que no utilizan**. Una clase solo deber√≠a implementar los m√©todos que realmente necesita.

üß† ¬øQu√© significa "interfaz" aqu√≠?

En programaci√≥n orientada a objetos, una **interfaz** representa un contrato de comportamiento: 
una lista de m√©todos que una clase debe implementar. **No tiene que ver con interfaces gr√°ficas** 
ni con men√∫s, sino con **estructuras de c√≥digo**.

En Python, como no existe la palabra clave "interface" como en otros lenguajes, una interfaz se modela 
usando una **clase abstracta ("ABC") con m√©todos abstractos ("@abstractmethod")**. 
Estas clases no pueden instanciarse directamente, y obligan a sus subclases a implementar los m√©todos definidos.

‚úÖ Ventajas:
- Evita que las clases implementen m√©todos innecesarios.
- Favorece la cohesi√≥n y el c√≥digo limpio.
- Reduce el acoplamiento entre componentes.
- Facilita la evoluci√≥n de la base de c√≥digo sin efectos colaterales.

Imaginemos una jerarqu√≠a de animales donde algunos vuelan, otros nadan y otros corren.
Si una sola interfaz contiene los m√©todos "volar()", "nadar()" y "correr()",
los animales que no puedan realizar una de esas acciones se ver√°n forzados a
implementarla de forma vac√≠a o incorrecta.
"""

"""‚ùå MAL EJEMPLO ‚ùå (Viola ISP)"""
from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def volar(self):
        pass

    @abstractmethod
    def nadar(self):
        pass

    @abstractmethod
    def correr(self):
        pass

"""
Aqu√≠ cualquier subclase debe **obligatoriamente** definir los tres m√©todos,
aunque no todos los necesite. Por ejemplo, un Perro no vuela: terminar√≠a
con un m√©todo "volar()" vac√≠o o con c√≥digo innecesario, lo que viola ISP.
"""
class Perro(Animal):
    def volar(self): # M√©todo irrelevante
        pass

    def nadar(self):
        print("El perro nada")

    def correr(self):
        print("El perro corre")

"""‚úÖ BUEN EJEMPLO ‚úÖ (Aplica ISP)"""
# Separamos las capacidades en interfaces peque√±as y espec√≠ficas:
class PuedeVolar(ABC):
    @abstractmethod
    def volar(self):
        pass


class PuedeNadar(ABC):
    @abstractmethod
    def nadar(self):
        pass


class PuedeCorrer(ABC):
    @abstractmethod
    def correr(self):
        pass


# Ahora cada clase implementa solo lo que necesita:
class Perro(PuedeNadar, PuedeCorrer):
    def nadar(self):
        print("El perro nada")

    def correr(self):
        print("El perro corre")


class Pajaro(PuedeVolar, PuedeCorrer):
    def volar(self):
        print("El p√°jaro vuela")

    def correr(self):
        print("El p√°jaro corre")


"""
‚úÖ ¬øQu√© logramos aplicando ISP?
- Las clases implementan solo los m√©todos que realmente utilizan.
- Evitamos c√≥digo muerto o m√©todos vac√≠os que inducen a error.
- Reducimos el acoplamiento y aumentamos la cohesi√≥n de cada clase.
- El sistema es m√°s f√°cil de mantener y extender sin efectos secundarios.
"""

# Ejecuci√≥n del ejemplo con ISP
perro1 = Perro()
perro1.nadar()
perro1.correr()

pajarito = Pajaro()
pajarito.volar()
pajarito.correr()